
commit 92712205b74c34997fba00c76798d56e6eae69d3
Author: raoahmadrahil <raoahmad_13@hotmail.com>
Date:   Mon Sep 15 16:55:53 2025 +0500

    ci(no-tx): add A1ΓÇôA4 (fallback encrypt, NO_TX manifest, live preflight, on-chain preview); unique artifact names

diff --git a/scripts/anchor_onchain.js b/scripts/anchor_onchain.js
new file mode 100644
index 0000000..f537551
--- /dev/null
+++ b/scripts/anchor_onchain.js
@@ -0,0 +1,30 @@
+const { ethers } = require("ethers");
+function argOf(f){ const i=process.argv.indexOf(f); return (i>-1 && i+1<process.argv.length) ? process.argv[i+1] : null; }
+const scoresRoot = argOf("--scoresRoot"); const modelHash  = argOf("--modelHash");
+const isHex32 = s => typeof s==="string" && /^0x[0-9a-fA-F]{64}$/.test(s);
+if (!isHex32(scoresRoot) || !isHex32(modelHash)) { console.error("Usage: node scripts/anchor_onchain.js --scoresRoot 0x<32B> --modelHash 0x<32B>"); process.exit(2); }
+
+const epochAbi = [
+  "function recordScoresRoot(bytes32 root) external",
+  "function publishModel(bytes32 modelHash) external"
+];
+
+const iface = new ethers.Interface(epochAbi);
+const data1 = iface.encodeFunctionData("recordScoresRoot",[scoresRoot]);
+const data2 = iface.encodeFunctionData("publishModel",[modelHash]);
+const epochAddr = process.env.EPOCH_MANAGER_ADDR || "<unset>";
+
+console.log(JSON.stringify({ preview:{ scoresRoot, modelHash, calls:[ {to:epochAddr, data:data1}, {to:epochAddr, data:data2} ] }}));
+
+if (process.env.CHAIN_RPC_URL && process.env.PRIVATE_KEY && process.env.EPOCH_MANAGER_ADDR) {
+  const provider = new ethers.JsonRpcProvider(process.env.CHAIN_RPC_URL);
+  const wallet   = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
+  const epoch    = new ethers.Contract(process.env.EPOCH_MANAGER_ADDR, epochAbi, wallet);
+  (async () => {
+    const tx1 = await epoch.recordScoresRoot(scoresRoot); const r1 = await tx1.wait();
+    const tx2 = await epoch.publishModel(modelHash);      const r2 = await tx2.wait();
+    console.log(JSON.stringify({ sent:true, txs:[r1?.hash||r1?.transactionHash, r2?.hash||r2?.transactionHash] }));
+  })().catch(e => { console.error(e.message||e); process.exit(1); });
+} else {
+  console.log(JSON.stringify({ sent:false, reason:"missing secrets or contract address" }));
+}
diff --git a/scripts/upload_no_tx.js b/scripts/upload_no_tx.js
new file mode 100644
index 0000000..67ce3a6
--- /dev/null
+++ b/scripts/upload_no_tx.js
@@ -0,0 +1,20 @@
+const { statSync, readFileSync, appendFileSync, mkdirSync, existsSync } = require("fs");
+const { createHash } = require("crypto");
+
+// Usage: node scripts/upload_no_tx.js --file <path> --kind <update|model|scores> [--note "..."]
+function argOf(f){ const i = process.argv.indexOf(f); return (i>-1 && i+1<process.argv.length) ? process.argv[i+1] : null; }
+const file = argOf("--file"); const kind = argOf("--kind")||"blob"; const note = argOf("--note")||"";
+if (!file) { console.error("Missing --file"); process.exit(2); }
+
+const buf = readFileSync(file);
+const sha256_hex = createHash("sha256").update(buf).digest("hex");
+const size_bytes = statSync(file).size;
+const pseudo_cid = `sha256:${sha256_hex}`;
+const created_at_utc = new Date().toISOString();
+
+const rec = { kind, file, size_bytes, sha256_hex, pseudo_cid, note, created_at_utc };
+const outDir = "artifacts";
+if (!existsSync(outDir)) mkdirSync(outDir, { recursive: true });
+appendFileSync(`${outDir}/manifest.jsonl`, JSON.stringify(rec) + "\n");
+
+console.log(JSON.stringify({ ok:true, wrote:`${outDir}/manifest.jsonl`, sha256_hex, pseudo_cid }));
name: ci-no-tx













































on:






















  workflow_dispatch:







    inputs:







      NO_TX:







        description: 'Dry-run (1) vs live (0)'







        required: false







        default: '1'







  push:






















    branches: [ rao ]






















    paths:






















      - scripts/**






















      - dist/crypto/**






















      - .github/workflows/ci-no-tx.yml






















      - hardhat.galileo.js






















      - package-lock.json






















      - package.json






















      - attestation_sample.json






















  pull_request:






















    branches: [ rao ]






















  workflow_dispatch: {}













































jobs:






















  round-no-tx:






















    runs-on: ubuntu-latest






















    env:






















      NO_TX: "1"






















      FL_TEE_PUBKEY_B64: "3p7bfXt9wbTTW2HC7OQ1Nz+DQ8hbeGdNrfx+FG+IK08="






















      TEE_ATTEST_MEAS_ALLOWLIST: '["SIM-TEE-DEMO-1"]'






















      TEE_ATTEST_ENCLAVE_ID: "SIM-TEE"






















    steps:
      - name: Init CI log
        shell: bash
        run: |
          set -euxo pipefail
          : > ci.log






      - name: Init CI log
        shell: bash
        run: |
          set -euxo pipefail
          : > ci.log














      - name: Checkout






















        uses: actions/checkout@v4













































      - name: Setup Node






















        uses: actions/setup-node@v4






















        with:






















          node-version: "20"






















          cache: npm













































      - name: Install deps






















        run: npm ci













































      - name: Build (Hardhat)






















        run: npx hardhat compile --config hardhat.galileo.js













































      - name: Dependency sanity (non-fatal)






















        continue-on-error: true






















        run: |






















          set -euxo pipefail






















          node -p "process.versions"






















          npm ls libsodium-wrappers || true






















          npm ls tweetnacl || true






















          node -e "console.log(require.resolve(\"libsodium-wrappers\"))" || true






















          node -e "console.log(require.resolve(\"tweetnacl\"))" || true













































      - name: Ensure attestation file






















        run: |






















          set -euxo pipefail






















          echo '{"ok":true,"measurement":"SIM-TEE-DEMO-1","enclave_id":"SIM-TEE","nonce":"demo"}' > attestation_sample.json






















      - name: Build JS tools (dist)






















        shell: bash






















        run: |






















          set -euxo pipefail






















          # Try common build scripts; don't hard-fail if a name doesn't exist






















          if [ ! -f dist/crypto/encrypt_update.js ]; then






















            npm run build || npm run build:tools || npm run build:dist || true






















          fi






















          ls -la dist || true






















          ls -la dist/crypto || true






















          # If still missing, try to fall back to source script path later






















          test -f dist/crypto/encrypt_update.js || true













































      - name: Prepare update + encrypt







        shell: bash







        run: |







          set -euxo pipefail







          echo '{"r":1,"weights":[0.1,0.2]}' > u.json







          : > ci.log







          : > enc.out.json















          TOOL="dist/crypto/encrypt_update.js"







          if [ ! -f "$TOOL" ] && [ -f "scripts/crypto/encrypt_update.js" ]; then







            TOOL="scripts/crypto/encrypt_update.js"







          fi







          echo "Using tool: $TOOL" | tee -a ci.log















          node "$TOOL" --in u.json --out u.enc.json 2>&1 | tee -a ci.log







          test -f u.enc.json







          node -e 'console.log(JSON.stringify({out:"u.enc.json", ok:true}))' > enc.out.json







      - name: Submit (NO_TX)






















        run: |






















          set -euxo pipefail






















          node scripts/submit_update_raw.js 0x0 1 dummycid u.enc.json --attestation ./attestation_sample.json | tee -a ci.log













































      - name: Score (NO_TX)






















        run: |






















          set -euxo pipefail






















          node scripts/compute_scores_and_post_root_raw.js --attestation ./attestation_sample.json | tee -a ci.log













































      - name: Aggregate/Publish (NO_TX)






















        run: |






















          set -euxo pipefail






















          node scripts/aggregate_and_publish_raw.js 0x0 1 agg.json dummyGlobalCid u.enc.json | tee -a ci.log













































      - name: Validate pass-lines






















        run: |






















          set -euxo pipefail






















          grep -F "// NO_TX set; preambles passed (submit)." ci.log






















          grep -F "// NO_TX set; preambles passed (scoring)." ci.log






















          grep -F "// NO_TX set; preambles passed (aggregate/publish)." ci.log






















          echo "All preambles passed."















































































            - name: Validate manifest integrity (NO_TX)






        if: env.NO_TX == '1'






        shell: pwsh






        run: |






          $ErrorActionPreference = 'Stop'






          if (!(Test-Path artifacts/manifest.jsonl)) { throw 'manifest.jsonl missing' }






          $line = Get-Content artifacts/manifest.jsonl -Tail 1 | ConvertFrom-Json






          if (-not $line.file -or -not $line.sha256_hex) { throw 'manifest tail missing fields' }






          $calc = (Get-FileHash -Algorithm SHA256 -LiteralPath $line.file).Hash.ToLower()






          "manifest sha: $($line.sha256_hex)"






          "file sha: $calc"






          if ($calc -ne $line.sha256_hex) { throw 'Mismatch: file hash != manifest' } else { 'OK: file hash matches manifest' } - name: Validate manifest integrity (NO_TX)






        if: env.NO_TX == '1'






        shell: pwsh






        run: |






          $ErrorActionPreference = 'Stop'






          if (!(Test-Path artifacts/manifest.jsonl)) { throw 'manifest.jsonl missing' }






          $line = Get-Content artifacts/manifest.jsonl -Tail 1 | ConvertFrom-Json






          if (-not $line.file -or -not $line.sha256_hex) { throw 'manifest tail missing fields' }






          $calc = (Get-FileHash -Algorithm SHA256 -LiteralPath $line.file).Hash.ToLower()






          "manifest sha: $($line.sha256_hex)"






          "file sha: $calc"






          if ($calc -ne $line.sha256_hex) { throw 'Mismatch: file hash != manifest' } else { 'OK: file hash matches manifest' }







      - name: A5 - Attestation policy preview






        shell: pwsh






        run: |






          $ErrorActionPreference = "Stop"






          if (!(Test-Path scripts/attestation_policy_preview.js)) { throw "preview tool missing" }






          node scripts/attestation_policy_preview.js attestation/policy.json







      - name: A5 - Attestation policy preview






        shell: pwsh






        run: |






          $ErrorActionPreference = "Stop"






          if (!(Test-Path scripts/attestation_policy_preview.js)) { throw "preview tool missing" }






          node scripts/attestation_policy_preview.js attestation/policy.json




















































      - name: Upload CI logs (always)




        if: always()




        uses: actions/upload-artifact@v4




        with:




          name: ci-${{ github.run_id }}-${{ github.run_attempt }}




          path: |




            ci.log




            artifacts/**




            attestation/policy.json




          if-no-files-found: warn










      - name: Upload CI logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ci.log
            artifacts/**
            attestation/policy.json
          if-no-files-found: warn
# nudge 2025-09-15T19:27:32Z








# nudge 2025-09-15T19:32:39Z






# nudge 2025-09-15T19:37:52Z














