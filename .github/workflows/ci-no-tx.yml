name: ci-no-tx





on:


  workflow_dispatch:
    inputs:
      NO_TX:
        description: 'Dry-run (1) vs live (0)'
        required: false
        default: '1'
  push:


    branches: [ rao ]


    paths:


      - scripts/**


      - dist/crypto/**


      - .github/workflows/ci-no-tx.yml


      - hardhat.galileo.js


      - package-lock.json


      - package.json


      - attestation_sample.json


  pull_request:


    branches: [ rao ]


  workflow_dispatch: {}





jobs:


  round-no-tx:


    runs-on: ubuntu-latest


    env:


      NO_TX: "1"


      FL_TEE_PUBKEY_B64: "3p7bfXt9wbTTW2HC7OQ1Nz+DQ8hbeGdNrfx+FG+IK08="


      TEE_ATTEST_MEAS_ALLOWLIST: '["SIM-TEE-DEMO-1"]'


      TEE_ATTEST_ENCLAVE_ID: "SIM-TEE"


    steps:


      - name: Checkout


        uses: actions/checkout@v4





      - name: Setup Node


        uses: actions/setup-node@v4


        with:


          node-version: "20"


          cache: npm





      - name: Install deps


        run: npm ci





      - name: Build (Hardhat)


        run: npx hardhat compile --config hardhat.galileo.js





      - name: Dependency sanity (non-fatal)


        continue-on-error: true


        run: |


          set -euxo pipefail


          node -p "process.versions"


          npm ls libsodium-wrappers || true


          npm ls tweetnacl || true


          node -e "console.log(require.resolve(\"libsodium-wrappers\"))" || true


          node -e "console.log(require.resolve(\"tweetnacl\"))" || true





      - name: Ensure attestation file


        run: |


          set -euxo pipefail


          echo '{"ok":true,"measurement":"SIM-TEE-DEMO-1","enclave_id":"SIM-TEE","nonce":"demo"}' > attestation_sample.json


      - name: Build JS tools (dist)


        shell: bash


        run: |


          set -euxo pipefail


          # Try common build scripts; don't hard-fail if a name doesn't exist


          if [ ! -f dist/crypto/encrypt_update.js ]; then


            npm run build || npm run build:tools || npm run build:dist || true


          fi


          ls -la dist || true


          ls -la dist/crypto || true


          # If still missing, try to fall back to source script path later


          test -f dist/crypto/encrypt_update.js || true





      - name: Prepare update + encrypt
        shell: bash
        run: |
          set -euxo pipefail
          echo '{"r":1,"weights":[0.1,0.2]}' > u.json
          : > ci.log
          : > enc.out.json

          TOOL="dist/crypto/encrypt_update.js"
          if [ ! -f "$TOOL" ] && [ -f "scripts/crypto/encrypt_update.js" ]; then
            TOOL="scripts/crypto/encrypt_update.js"
          fi
          echo "Using tool: $TOOL" | tee -a ci.log

          node "$TOOL" --in u.json --out u.enc.json 2>&1 | tee -a ci.log
          test -f u.enc.json
          node -e 'console.log(JSON.stringify({out:"u.enc.json", ok:true}))' > enc.out.json
      - name: Submit (NO_TX)


        run: |


          set -euxo pipefail


          node scripts/submit_update_raw.js 0x0 1 dummycid u.enc.json --attestation ./attestation_sample.json | tee -a ci.log





      - name: Score (NO_TX)


        run: |


          set -euxo pipefail


          node scripts/compute_scores_and_post_root_raw.js --attestation ./attestation_sample.json | tee -a ci.log





      - name: Aggregate/Publish (NO_TX)


        run: |


          set -euxo pipefail


          node scripts/aggregate_and_publish_raw.js 0x0 1 agg.json dummyGlobalCid u.enc.json | tee -a ci.log





      - name: Validate pass-lines


        run: |


          set -euxo pipefail


          grep -F "// NO_TX set; preambles passed (submit)." ci.log


          grep -F "// NO_TX set; preambles passed (scoring)." ci.log


          grep -F "// NO_TX set; preambles passed (aggregate/publish)." ci.log


          echo "All preambles passed."









            - name: Validate manifest integrity (NO_TX)
        if: env.NO_TX == '1'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (!(Test-Path artifacts/manifest.jsonl)) { throw 'manifest.jsonl missing' }
          $line = Get-Content artifacts/manifest.jsonl -Tail 1 | ConvertFrom-Json
          if (-not $line.file -or -not $line.sha256_hex) { throw 'manifest tail missing fields' }
          $calc = (Get-FileHash -Algorithm SHA256 -LiteralPath $line.file).Hash.ToLower()
          "manifest sha: $($line.sha256_hex)"
          "file sha: $calc"
          if ($calc -ne $line.sha256_hex) { throw 'Mismatch: file hash != manifest' } else { 'OK: file hash matches manifest' } - name: Validate manifest integrity (NO_TX)
        if: env.NO_TX == '1'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (!(Test-Path artifacts/manifest.jsonl)) { throw 'manifest.jsonl missing' }
          $line = Get-Content artifacts/manifest.jsonl -Tail 1 | ConvertFrom-Json
          if (-not $line.file -or -not $line.sha256_hex) { throw 'manifest tail missing fields' }
          $calc = (Get-FileHash -Algorithm SHA256 -LiteralPath $line.file).Hash.ToLower()
          "manifest sha: $($line.sha256_hex)"
          "file sha: $calc"
          if ($calc -ne $line.sha256_hex) { throw 'Mismatch: file hash != manifest' } else { 'OK: file hash matches manifest' }
      - name: A5 - Attestation policy preview
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          if (!(Test-Path scripts/attestation_policy_preview.js)) { throw "preview tool missing" }
          node scripts/attestation_policy_preview.js attestation/policy.json
      - name: A5 - Attestation policy preview
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          if (!(Test-Path scripts/attestation_policy_preview.js)) { throw "preview tool missing" }
          node scripts/attestation_policy_preview.js attestation/policy.json



